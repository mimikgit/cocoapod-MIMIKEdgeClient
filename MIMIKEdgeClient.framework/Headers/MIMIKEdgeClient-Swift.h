// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef MIMIKEDGECLIENT_SWIFT_H
#define MIMIKEDGECLIENT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MIMIKEdgeClient",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




/// This object is constructed with a user access token and used for client library authorization. See authorizeClientLibraryWith public function.
/// warning:
/// Client library does not store this user access token anywhere. It is the application developer’s responsibility to call this function with a valid user access token after each client library initialization. It is also the application developer’s responsibility to store the user access token somewhere safe.
/// \param userAccessToken User access token to be used by the client and service libraries for backend microservice API calls.
///
SWIFT_CLASS("_TtC15MIMIKEdgeClient18MIMIKAuthorization")
@interface MIMIKAuthorization : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class NSNumber;

/// MIMIKEdgeClient library can help you interact with the following mimik services:
/// <ul>
///   <li>
///     edgeEngine Runtime controls
///   </li>
///   <li>
///     edgeEngine Runtime information
///   </li>
///   <li>
///     edge microservice deployment
///   </li>
///   <li>
///     mimik service health check
///   </li>
/// </ul>
/// There are additional service libraries available for the following mimik services:
/// <ul>
///   <li>
///     MIMIKEdgeClientIdentity
///   </li>
///   <li>
///     MIMIKEdgeClientProfile
///   </li>
///   <li>
///     MIMIKEdgeClientPeer
///   </li>
///   <li>
///     MIMIKEdgeClientThumbnail
///   </li>
/// </ul>
/// And additional service libraries for the following mimik tenant services:
/// <ul>
///   <li>
///     MIMIKEdgeClientAssessment
///   </li>
///   <li>
///     MIMIKEdgeClientNotification
///   </li>
///   <li>
///     MIMIKEdgeClientTracker
///   </li>
/// </ul>
/// note:
/// The client library will automatically restart edgeEngine during UIApplication.willEnterForegroundNotification ONLY when it was the client library that shut down a running edgeEngine during UIApplication.didEnterBackgroundNotification.
/// <ul>
///   <li>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MIMIKEdgeClient15MIMIKEdgeClient")
@interface MIMIKEdgeClient : NSObject
- (BOOL)saveLibraryUserAccessTokenWithToken:(NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




















/// Provides edgeEngine instance specific MIMIKEdgeInfo object. Essentially provides a read only MIMIKEdgeInfo object with edgeEngine instance parameters (nodeId, nodeName, version, accountId) in a completion block.
/// <ul>
///   <li>
///     nodeId: A unique node (device) identifier. It is assigned by the host application during startEdge.
///   </li>
///   <li>
///     nodeName: A node (device) name. It is derived from the device’s system name.
///   </li>
///   <li>
///     _ version: edgeEngine version number.
///   </li>
///   <li>
///     accountId: Currently associated account identifier. It is assigned during account authorization.
///   </li>
///   <li>
///     linkLocalIp: IP address of the interface edgeEngine is currently bound to.
///   </li>
///   <li>
///     supernodeTypeName: A unique supernode type name. It allows nodes to discovered compatible supernodes.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MIMIKEdgeClient13MIMIKEdgeInfo")
@interface MIMIKEdgeInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MIMIKEdgeClient25MIMIKGenericContentResult")
@interface MIMIKGenericContentResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MIMIKEdgeClient19MIMIKJwtTokenHelper")
@interface MIMIKJwtTokenHelper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Console logging class used by [mimik] modules and applications to tag and structure console log output in an organized and human readable format.
SWIFT_CLASS("_TtC15MIMIKEdgeClient8MIMIKLog")
@interface MIMIKLog : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15MIMIKEdgeClient17MIMIKMicroservice")
@interface MIMIKMicroservice : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC15MIMIKEdgeClient26MIMIKMicroserviceContainer")
@interface MIMIKMicroserviceContainer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Micro service configuration object. Used for micro service deployment.
/// <ul>
///   <li>
///     imageName: Name of your microservice image.
///   </li>
///   <li>
///     containerName: Name of your microservice container.
///   </li>
///   <li>
///     baseApiPath: A path to deploy your micro service to.
///   </li>
///   <li>
///     envVariables: Any extra environment variables for your micro service.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MIMIKEdgeClient33MIMIKMicroserviceDeploymentConfig")
@interface MIMIKMicroserviceDeploymentConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MIMIKEdgeClient22MIMIKMicroserviceImage")
@interface MIMIKMicroserviceImage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Micro service configuration object. Used for micro service deployment.
/// <ul>
///   <li>
///     edgeAccessToken: Access token for the mimik edge instance.
///   </li>
///   <li>
///     imageName: Name of your microservice image.
///   </li>
///   <li>
///     containerName: Name of your microservice container.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MIMIKEdgeClient35MIMIKMicroserviceUndeploymentConfig")
@interface MIMIKMicroserviceUndeploymentConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC15MIMIKEdgeClient12MIMIKRequest")
@interface MIMIKRequest : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

/// MIMIK backend microservice configuration object.
/// <ul>
///   <li>
///     backendMicroserviceRootUrl: microservice URL.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC15MIMIKEdgeClient12MIMIKService")
@interface MIMIKService : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// mimik edgeEngine startup parameters to be used during edgeEngine initialization.
/// important:
/// optional logLevel controls the level of console log output from the edgeEngine platform.
/// important:
/// optional nodeInfoLevel controls the level of node information visible to other nodes on the network.
/// important:
/// optional nodeName is the name visible to other nodes on the network.
/// important:
/// localDiscovery turns the edgeEngine’s local discovery feature on or off.
SWIFT_CLASS("_TtC15MIMIKEdgeClient22MIMIKStartupParameters")
@interface MIMIKStartupParameters : NSObject <NSCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
